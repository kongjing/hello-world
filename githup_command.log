1.查看本地分支：
git branch

2. 创建本次分支：
git branch new_branch_name

3. 切换到新的分支
git checkout branch_name

4. 创建分支并切换到该分支上
git checkout -b branch_name

4. 在分支上提交change
git add filenameone filenametwo filename......
git commit -m 'the info about change'
git push

5. if no upstream, the 4th last step should change：
 git push --set-upstream origin local_branch_name

6. 查看远程分支
git branch -r

7. 查看本地和远程所有分支
git branch -a

8. 合并本地分支
git checkout master
git merge new_branch_name

9. 删除分支
git branch -d new_branch_name

10. git 提交时，不需要每次输入用户名和密码的解决方法
首先，如果我们git clone的下载代码的时候是连接的https://而不是git@git (ssh)的形式，当我们操作git pull/push到远程的时候，总是提示我们输入账号和密码才能操作成功，频繁的输入账号和密码会很麻烦，也特别烦恼。

解决办法：

git bash进入你的项目目录，输入：

git config --global credential.helper store

然后你会在你本地生成一个文本，上边记录你的账号和密码。当然这些你可以不用关心。
然后你使用上述的命令配置好之后，再操作一次git pull，然后它会提示你输入账号密码，这一次之后就不需要再次输入密码了

11. 初始化本地仓库并且建立远程仓库
#特别说明：此时的远程仓库建立在本地机器的某个位置上，而不是githup上面
mkdir local_rep
cd local_rep
git init   #初始化仓库
touch filename
git add filename
git commit -m 'base version'  #将文件提交到了本地仓库
git remote add origin /z/gitproject/gnu_make_study/.git/ #在本地仓库添加一个远程							  仓库，最后列是本地地址
git push --set-upstream origin master  #将本地master分支跟踪到远程分支

12. 解决在cygwin64上面，git clone提示无权限的问题
将已经生成的.ssh/*的内容copy到xx:\cygwin64\home\username\.ssh下面

13. windows系统上面，解决在cygwin64上面， git 命令无法自动补全的问题
git clone https://github.com/markgandolfo/git-bash-completion.git
cp xxx/completion/git-completion.bash ~/.git-completion.bash
然后在notepad++里面编译该文件转换为unix的格式并保存
vi ~/.bashrc,在文件的最后一行，加上如下代码：
source ~/.git-completion.bash
然后重新打开终端就可以自动补全啦

14.git push报错如下的解决方案
$ git push
bash: /dev/tty: No such device or address
error: failed to execute prompt script (exit code 1)
fatal: could not read Username for 'https://github.com': Invalid argument
方案：由于本地git环境配置的是ssh方式，所以进入到相应工程目录下，修改文件
vi .git/config , url改成git remote上面ssh的地址即可

15.显示远程服务器分支的情况
git remote show origin

16. dev分支合并master分支的情况
git merge master

17. 合并分支的另一种方法，rebase方法, 比如master分支合并dev分支
git checkout dev
git rebase master //说明此时的dev已经以master为基准，将共同祖先往后的每次提交的patch 按照顺序apply，结果是dev分支所在指针已经在每次patch的过程中移动，知道合并完毕
//说明： 对于上面的两步，可以合并成一步：git rebase master dev
git checkout master
git merge dev //此时master直接merge了dev，属于fast-forward merge

18. 关于提交代码的注意事项
首先，check下代码尾部是否有多余的空格，检查方法为：
git diff --check
第二， try to make each commit a logically separate changeset.简单来讲，就是每次提交都对应一个问题，使提交更加的清晰。也方便我们后期回溯版本查找问题。
最后，创建有质量的提交信息，格式为：
Summary， no more than 50 characters:describes the changeset concisely
followed by a blank line
followed by a more detailed explanation, include your motivation for the change and contrast its implementation with previous behavior
followd by a blank line
write your commit message in the imperative
Further paragraphs come after blank lines

