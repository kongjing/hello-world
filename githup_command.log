1.查看本地分支：
git branch

2. 创建本次分支：
git branch new_branch_name

3. 切换到新的分支
git checkout branch_name

4. 创建分支并切换到该分支上
git checkout -b branch_name

4. 在分支上提交change
git add filenameone filenametwo filename......
git commit -m 'the info about change'
git push

5. if no upstream, the 4th last step should change：
 git push --set-upstream origin local_branch_name

6. 查看远程分支
git branch -r

7. 查看本地和远程所有分支
git branch -a

8. 合并本地分支
git checkout master
git merge new_branch_name

9. 删除分支
git branch -d new_branch_name

10. git 提交时，不需要每次输入用户名和密码的解决方法
首先，如果我们git clone的下载代码的时候是连接的https://而不是git@git (ssh)的形式，当我们操作git pull/push到远程的时候，总是提示我们输入账号和密码才能操作成功，频繁的输入账号和密码会很麻烦，也特别烦恼。

解决办法：

git bash进入你的项目目录，输入：

git config --global credential.helper store

然后你会在你本地生成一个文本，上边记录你的账号和密码。当然这些你可以不用关心。
然后你使用上述的命令配置好之后，再操作一次git pull，然后它会提示你输入账号密码，这一次之后就不需要再次输入密码了

11. 初始化本地仓库并且建立远程仓库
#特别说明：此时的远程仓库建立在本地机器的某个位置上，而不是githup上面
mkdir local_rep
cd local_rep
git init   #初始化仓库
touch filename
git add filename
git commit -m 'base version'  #将文件提交到了本地仓库
git remote add origin /z/gitproject/gnu_make_study/.git/ #在本地仓库添加一个远程							  仓库，最后列是本地地址
git push --set-upstream origin master  #将本地master分支跟踪到远程分支

12. 解决在cygwin64上面，git clone提示无权限的问题
将已经生成的.ssh/*的内容copy到xx:\cygwin64\home\username\.ssh下面

13. windows系统上面，解决在cygwin64上面， git 命令无法自动补全的问题
git clone https://github.com/markgandolfo/git-bash-completion.git
cp xxx/completion/git-completion.bash ~/.git-completion.bash
然后在notepad++里面编译该文件转换为unix的格式并保存
vi ~/.bashrc,在文件的最后一行，加上如下代码：
source ~/.git-completion.bash
然后重新打开终端就可以自动补全啦

14.git push报错如下的解决方案
$ git push
bash: /dev/tty: No such device or address
error: failed to execute prompt script (exit code 1)
fatal: could not read Username for 'https://github.com': Invalid argument
方案：由于本地git环境配置的是ssh方式，所以进入到相应工程目录下，修改文件
vi .git/config , url改成git remote上面ssh的地址即可

15.显示远程服务器分支的情况
git remote show origin

16. dev分支合并master分支的情况
git merge master

17. 合并分支的另一种方法，rebase方法, 比如master分支合并dev分支
git checkout dev
git rebase master //说明此时的dev已经以master为基准，将共同祖先往后的每次提交的patch 按照顺序apply，结果是dev分支所在指针已经在每次patch的过程中移动，知道合并完毕
//说明： 对于上面的两步，可以合并成一步：git rebase master dev
git checkout master
git merge dev //此时master直接merge了dev，属于fast-forward merge

18. 关于提交代码的注意事项
首先，check下代码尾部是否有多余的空格，检查方法为：
git diff --check
第二， try to make each commit a logically separate changeset.简单来讲，就是每次提交都对应一个问题，使提交更加的清晰。也方便我们后期回溯版本查找问题。
最后，创建有质量的提交信息，格式为：
Summary， no more than 50 characters:describes the changeset concisely
followed by a blank line
followed by a more detailed explanation, include your motivation for the change and contrast its implementation with previous behavior
followd by a blank line
write your commit message in the imperative
Further paragraphs come after blank lines

19.查找两个branch的共同祖先
git merge-base branchone branchtwo

20. contrib分支引入的差异从与master分支的共同祖先开始算
git diff master... contrib

21. 如果pull request的时候，出现merge cleanly的问题，解决办法有两个：
推荐方法二： 因为rebase的好处只有history清晰，坏处rebase的新补丁结果可能不是我们想要的，可能会多出一些补丁(概率较小）；
a) 基于原始库rebase
b)merge原始库到本分支，具体步骤如下：
git remote add upstream remoteURL
git fetch upstream
git merge upstream/master
如果有冲突处理file冲突：git add file; git commit
git push origin branchname 
提醒：假如使用第一种方法，当然可以，但是需要注意一点：假如Pull Request is already opened on, it is highly encouraged to not force push over the branch. 原因是这样的，If other people have pulled it down and done more work on it, you run into all of the issues outlined in The Perils of Rebasing.如果该open请求没有拉的解决办法为：关闭掉拉取请求，将当前分支的rebase结果push到一个新的分支上面，然后重新拉取一个新的请求即可。如果该open请求已经被拉取的解决办法为：我觉得可以基于目前最新的远程初始master的情况,进行rebase，然后push到一个新的分支上面，然后拉取新的请求，并且在commits中说明情况。上面是我的个人观点，文档中解决方案是这样的： Instead, push the rebased branch to a new branch on GitHub and open a brand new Pull Request referencing the old one, then close the original.

22. Multiple Points
git log refA.. refB 等价于 git log ^refA refB 等价于 git log refB --not refA
git log refA refB ^refC 等于于 git log refA refB --not refC , it means that all commits are reachable from refA or refB but not from refC

23. Triple Dot
git log --left-right master...experiment , it means that if you want to see what is in master or experiment but not any common references.

24. do the partial-file staging
git add --patch 进入编译模式，不需要提交的打上#号并保存
git commit -m '输入log' 
git commit -m '' 

25. 修改提交（包括内容和注释），前提是没有push上去，步骤如下：
修改完毕stage，git add/rm filename
重新提交， git commit --amend,重新编辑commit的注释
特别提醒：这个amend命令相当于rebase，因为它改变了commit的SHA-1,所以如果已经push上去了，就不要再次修改push啦 
